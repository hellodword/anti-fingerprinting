name: windows

on:
  workflow_dispatch:

env:
  GOTOOLCHAIN: "local"

jobs:
  # https://www.kenmuse.com/blog/dynamic-build-matrices-in-github-actions/
  generate-versions:
    runs-on: ubuntu-latest
    outputs:
      mymatrix: ${{ steps.dataStep.outputs.myoutput }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"

      - name: build fetch-latest-browser
        run: |
          go build -trimpath -ldflags "-s -w -buildid=" -o ./dist/fetch-latest-browser ./cmd/fetch-latest-browser

      - name: run fetch-latest-browser
        run: |
          docker run -v $PWD/dist:/w -w /w gcr.io/distroless/base-debian12:latest /w/fetch-latest-browser

      - name: dynamic matrix for next job
        id: dataStep
        run: |
          browsers="$(cat ./dist/browser.json)"
          echo "myoutput=$(jq -cn --argjson environments "$browsers" '{"platform": ["win10","win11"], browser: $environments}')" >> $GITHUB_OUTPUT

  run-browser:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: generate-versions
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-versions.outputs.mymatrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: build collector
        run: |
          docker run --rm --name collector-builder -v `pwd`:/w -w /w golang:1 \
            bash -c './scripts/apply-patch.sh && ./scripts/build-collector.sh'

          sudo chown -R `id -u`:`id -g` dist

      - name: build compare-collectorinfo
        run: |
          docker run --rm --name collector-builder -v `pwd`:/w -w /w golang:1 \
            bash -c './scripts/apply-patch.sh && ./scripts/build-compare-collectorinfo.sh'

          sudo chown -R `id -u`:`id -g` dist

      - name: prepare
        run: |
          ./scripts/dockur-nginx-auth.sh
          ./scripts/generate-certs.sh
          ./scripts/generate-ssh-key.sh

      - name: download ${{ matrix.browser.browser }} and verify
        env:
          BROWSER_BROWSER: ${{ matrix.browser.browser }}
          BROWSER_URL: ${{ matrix.browser.url }}
          BROWSER_HASH: ${{ matrix.browser.hash }}
          BROWSER_VERSION: ${{ matrix.browser.version }}
        run: ./scripts/download-browser.sh

      - name: run collector
        run: ./scripts/run-collector.sh

      - name: test collector
        run: |
          sleep 3s
          curl -v -f -k https://172.17.0.1:8443/v1/all

      - name: expose VNC
        run: |
          docker run --rm -d --name cloudflared --network host cloudflare/cloudflared tunnel --url http://127.0.0.1:8006

      - name: (Debug) show storage
        run: |
          set -x
          df -T
          df -T `pwd`

      - uses: AdityaGarg8/remove-unwanted-software@3ccb44bee98b5232ab087e2bb23a5d8b14043223
        with:
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "false"
          remove-large-packages: "false"
          remove-cached-tools: "true"
          remove-swapfile: "false"

      - name: (Debug) show storage
        run: |
          set -x
          df -T
          df -T `pwd`

      - name: run windows
        env:
          BROWSER_BROWSER: ${{ matrix.browser.browser }}
          BROWSER_URL: ${{ matrix.browser.url }}
          BROWSER_HASH: ${{ matrix.browser.hash }}
          BROWSER_VERSION: ${{ matrix.browser.version }}
          WINDOWS_VERSION: ${{ matrix.platform }}
        run: ./scripts/run-dockur.sh

      - name: show trycloudflared
        run: |
          docker logs cloudflared 2>&1 | grep -oP 'https://[^\n \./]+\.trycloudflare.com'

      - name: wait
        timeout-minutes: 25
        run: |
          docker logs -f windows &

          while ! curl -s -f -k https://127.0.0.1:8443/v1/id/00000000-0000-0000-0000-000000000001 --output ${{ matrix.platform }}-${{ matrix.browser.browser }}-${{ matrix.browser.version }}-1.json;
          do
            sleep 10s
          done

          while ! curl -s -f -k https://127.0.0.1:8443/v1/id/00000000-0000-0000-0000-000000000002 --output ${{ matrix.platform }}-${{ matrix.browser.browser }}-${{ matrix.browser.version }}-2.json;
          do
            sleep 2s
          done

          while ! curl -s -f -k https://127.0.0.1:8443/v1/id/00000000-0000-0000-0000-000000000003 --output ${{ matrix.platform }}-${{ matrix.browser.browser }}-${{ matrix.browser.version }}-3.json;
          do
            sleep 2s
          done

      - name: (Debug) show storage
        run: |
          set -x
          df -T
          df -T `pwd`

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.browser.browser }}-${{ matrix.browser.version }}
          path: |
            ${{ matrix.platform }}-${{ matrix.browser.browser }}-${{ matrix.browser.version }}-*.json

      - name: verify and update content
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for i in {1..3}
          do
            sleep $[ ( $RANDOM % 30 )  + 1 ]s

            filename="${{ matrix.platform }}-${{ matrix.browser.browser }}-${{ matrix.browser.version }}-$i.json"
            json="$(cat $filename)"
            echo "$json" | jq -e . >/dev/null 2>&1

            content="$(echo "$json" | base64 -w0)"
            message="update $filename"

            http_code=$(curl -o /dev/null -sSL -w "%{http_code}" "https://raw.githubusercontent.com/${{ github.repository }}/assets/$filename")

            url="https://api.github.com/repos/${{ github.repository }}/contents/$filename"

            if [ "$http_code" != "404" ]; then
              rm -rf /tmp/src.json
              curl -fsSL --output /tmp/src.json "https://raw.githubusercontent.com/${{ github.repository }}/assets/$filename"
              if docker run -v $PWD/dist:/w -w /w gcr.io/distroless/base-debian12:latest /w/compare-collectorinfo -s "$(cat /tmp/src.json)" -s "$(cat $filename)"; then
                continue
              fi
            fi

            for j in {1..3}
            do
              if [ "$http_code" != "404" ]; then
                sha="$(curl -sSL \
                  -H "Accept: application/vnd.github+json" \
                  -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "$url?ref=assets" | jq -r 'select(.sha != null) | .sha')"
                [ -n "$sha" ]
                body="$(jq -cn \
                  --arg arg_content "$content" \
                  --arg arg_message "$message" \
                  --arg arg_sha "$sha" \
                  '{message: $arg_message,"committer":{"name":"dependabot[bot]","email":"49699333+dependabot[bot]@users.noreply.github.com"},"branch":"assets",sha: $arg_sha,content: $arg_content}')"
              else
                body="$(jq -cn \
                  --arg arg_content "$content" \
                  --arg arg_message "$message" \
                  '{message: $arg_message,"committer":{"name":"dependabot[bot]","email":"49699333+dependabot[bot]@users.noreply.github.com"},"branch":"assets",content: $arg_content}')"
              fi

              echo "body $body"

              if curl -fsSL \
                -X PUT \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "$url" \
                -d "$body"; then
                break
              fi

              echo "update $filename failed $i-$j"
              sleep $[ ( $RANDOM % 30 )  + 30 ]s
            done

          done
